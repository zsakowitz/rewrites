Storymatic {
  Script = StatementBlock

  WrappedStatementBlock = "{" StatementBlock "}"

  StatementBlock
    = WrappedStatementBlock -- wrapped_block
    | Statement* -- statements

  SingleStatementBlock<prefix>
    = prefix? WrappedStatementBlock -- wrapped_block
    | prefix #(space+) Statement -- single_statement

  IfStatement = "if" Expression SingleStatementBlock<"then"> ";"? ElseIfStatement* ElseStatement?
  ElseIfStatement = ElseIfKeyword Expression SingleStatementBlock<"then"> ";"?
  ElseStatement = "else" SingleStatementBlock<"then"> ";"?

  ElseIfKeyword
    = "else" "if" -- else_if
    | "elif" -- elif

  Statement
    = Expression #statementTerminator spaces -- expression
    | IfStatement

  statementTerminator
    = spaces ";" -- semicolon
    | spaces &reserved_block -- keyword
    | spaces &"}" -- block_end
    | spaces end -- script_end
    | lineTerminator -- newline

  lineTerminator = (~("\r\n" | "\n") space)* ("\r\n" | "\n") spaces ~lineContinuer
  lineContinuer
    = "+" | "-" | "*" | "/" | "^" | "%" | "==" | "!=" | "[" | "(" | "." | "<" | ">" | "&&" | "||" | reserved_operators

  Expression = LogicalExp

  LiteralExp
    = "(" Expression ")" -- parenthesized
    | decimalNumber
    | hexNumber
    | identifier
    | symbol
    | boolean
    | null

  NotExp
    = ("!" | ("not" #(~id_continue))) NotExp -- logical_not
    | "+" NotExp -- unary_plus
    | "-" NotExp -- unary_minus
    | "type" "of" #(~id_continue) NotExp -- typeof
    | LiteralExp

  ExpExp
    = ExpExp "^" NotExp -- exponentiate
    | NotExp

  MulExp
    = MulExp "*" ExpExp -- multiplication
    | MulExp "/" ExpExp -- division
    | MulExp "%" ExpExp -- modulus
    | ExpExp

  AddExp
    = AddExp "+" MulExp -- addition
    | AddExp "-" MulExp -- subtraction
    | MulExp

  CompareExp
    = CompareExp "<" AddExp -- less_than
    | CompareExp "<=" AddExp -- less_than_equal
    | CompareExp ">" AddExp -- greater_than
    | CompareExp ">=" AddExp -- greater_than_equal
    | CompareExp ("is" spaces)? "in" #(~id_continue) AddExp -- within
    | CompareExp "isnt" spaces "in" #(~id_continue) AddExp -- not_within
    | CompareExp "is" spaces "a" #(~id_continue) AddExp -- instanceof
    | CompareExp "isnt" spaces "a" #(~id_continue) AddExp -- not_instanceof
    | AddExp

  EqualityExp
    = EqualityExp ("==" | ("is" ~(spaces "a") #(~id_continue))) CompareExp -- equal_to
    | EqualityExp ("!=" | ("isnt" ~(spaces "a") #(~id_continue))) CompareExp -- not_equal_to
    | CompareExp

  LogicalExp
    = LogicalExp ("&&" | ("and" #(~id_continue))) EqualityExp -- logical_and
    | LogicalExp ("||" | ("or" #(~id_continue))) EqualityExp -- logical_or
    | EqualityExp

  whitespace = (~("\n" | "\r") space)+

  number = digit+
  sign = ("+" | "-")?
  decimalNumber = sign number ("." number)? ("e" sign number)?
  hexNumber = sign "0x" hexDigit+

  boolean = true | false
  true = "true"
  false = "false"

  null = "null"

  id_continue = letter | digit

  reserved_block = ("if" | "elif" | "else" | "elseif" | "then") ~id_continue
  reserved_operators = ("and" | "or" | "not" | ("is" ~"nt") | "isnt") ~id_continue
  reserved_inline = ("a" | "type" | "of" | "typeof") ~id_continue
  reserved_primitive = ("true" | "false" | "null") ~id_continue
  reserved = reserved_block | reserved_operators | reserved_inline | reserved_primitive

  identifierWord = ~reserved letter+ (digit+ letter+)*
  identifierWords = identifierWord (whitespace (identifierWord | digit+))*
  identifier = identifierWords

  symbol = "#" identifier
}
