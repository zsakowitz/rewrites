Storymatic {
  Script = StatementBlock

  WrappedStatementBlock = "{" StatementBlock "}"

  StatementBlock = WrappedStatementBlock | Statement*
  SingleStatementBlock<prefix> = prefix? WrappedStatementBlock | prefix Statement

  IfStatement = "if" Expression SingleStatementBlock<"then"> ";"* ElseIfStatement* ElseStatement?
  ElseIfStatement = ElseIfKeyword Expression SingleStatementBlock<"then"> ";"*
  ElseStatement = "else" SingleStatementBlock<"then"> ";"*

  ElseIfKeyword
    = "else" "if" -- else_if
    | "elif" -- elif

  Statement
    = Expression StatementTerminator -- expression
    | IfStatement

  StatementTerminator = ";"+ | &reserved_block | &("elif") | &"}" | end

  Expression = LogicalExp

  LiteralExp
    = "(" Expression ")" -- parenthesized
    | decimalNumber
    | hexNumber
    | identifier
    | symbol
    | boolean
    | null
  
  NotExp
    = ("!" | "not") NotExp -- logical_not
    | "+" NotExp -- unary_plus
    | "-" NotExp -- unary_minus
    | "type" "of" NotExp -- typeof
    | NotExp "is" space "a" reserved_type -- typeof_check
    | LiteralExp

  ExpExp
    = ExpExp "^" NotExp -- exponentiate
    | NotExp

  MulExp
    = MulExp "*" ExpExp -- multiplication
    | MulExp "/" ExpExp -- division
    | ExpExp

  AddExp
    = AddExp "+" MulExp -- addition
    | AddExp "-" MulExp -- subtraction
    | MulExp

  CompareExp
    = CompareExp "<" AddExp -- less_than
    | CompareExp "<=" AddExp -- less_than_equal
    | CompareExp ">" AddExp -- greater_than
    | CompareExp ">=" AddExp -- greater_than_equal
    | CompareExp (("is" space)? "in") AddExp -- within
    | CompareExp ("isnt" space "in") AddExp -- not_within
    | CompareExp ("is" space "a") AddExp -- instanceof
    | CompareExp ("isnt" space "a") AddExp -- not_instanceof
    | AddExp

  EqualityExp
    = EqualityExp ("==" | "is") CompareExp -- equal_to
    | EqualityExp ("!=" | "isnt") CompareExp -- not_equal_to
    | CompareExp

  LogicalExp
    = LogicalExp ("&&" | "and") EqualityExp -- logical_and
    | LogicalExp ("||" | "or") EqualityExp -- logical_or
    | EqualityExp

  whitespace = (~("\n" | "\r") space)+

  number = digit+
  sign = ("+" | "-")?
  decimalNumber = sign number ("." number)? ("e" sign number)?
  hexNumber = sign "0x" hexDigit+

  boolean = true | false
  true = "true"
  false = "false"

  null = "null"

  reserved_block = ("if" | "elif" | "else" | "elseif" | "then") ~(letter | digit)
  reserved_inline = ("and" | "or" | "not" | ("is" ~"nt") | "isnt" | "a") ~(letter | digit)
  reserved_primitive = ("true" | "false" | "null") ~(letter | digit)
  reserved_type = ("string" | "number" | "boolean" | "symbol" | "bigint" | "object" | "function" | "void" | "null") ~(letter | digit)
  reserved = reserved_block | reserved_inline | reserved_primitive | reserved_type

  identifierWord = ~reserved letter+ (digit+ letter+)*
  identifierWords = identifierWord (whitespace (identifierWord | digit+))*
  identifier = identifierWords

  symbol = "#" identifier
}
