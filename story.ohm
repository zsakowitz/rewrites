Storymatic {
  Script = StatementBlock

  WrappedStatementBlock = "{" StatementBlock "}"

  StatementBlock
    = WrappedStatementBlock -- wrapped_block
    | Statement* -- statements

  SingleStatementBlock<prefix>
    = prefix? WrappedStatementBlock -- wrapped_block
    | prefix #(space+) Statement -- single_statement

  UnprefixedSingleStatementBlock
    = WrappedStatementBlock -- wrapped_block
    | Statement -- single_statement

  IfStatement = ("if" | "unless") Expression SingleStatementBlock<"then"> ElseIfStatement* ElseStatement?
  ElseIfStatement = ElseIfKeyword Expression SingleStatementBlock<"then">
  ElseStatement = "else" #(space+) UnprefixedSingleStatementBlock

  ElseIfKeyword
    = "else" "if" -- else_if
    | "elif" -- elif

  Statement
    = Expression #statementTerminator -- expression
    | IfStatement -- if
    | BlockFunction<""> -- function
    | "print" #(space+) Expression #statementTerminator -- print
    | "throw" #(space+) Expression #statementTerminator -- throw
    | "repeat" #(space+) Expression SingleStatementBlock<"do"> -- repeat
    | "while" #(space+) Expression SingleStatementBlock<"do"> -- while
    | "until" #(space+) Expression SingleStatementBlock<"do"> -- until
    | "do" #(space+) UnprefixedSingleStatementBlock #(space+) "while" #(space+) Expression -- do_while
    | "do" #(space+) UnprefixedSingleStatementBlock #(space+) "until" #(space+) Expression -- do_until
    | "for" #(space+) ForLoopKey #(space+) "in" #(space+) Expression SingleStatementBlock<"do"> -- for_key
    | "for" #(space+) "(" identifier? "," identifier? ")" #(space+) "in" #(space+) Expression SingleStatementBlock<"do"> -- for_key_value
    | "for" #(space+) ForLoopKey #(space+) "of" #(space+) Expression SingleStatementBlock<"do"> -- iterate_over
    | "for" #(space+) "(" identifier? "," identifier? ")" #(space+) "of" #(space+) Expression SingleStatementBlock<"do"> -- iterate_indices
    | "break" #statementTerminator -- break
    | "continue" #statementTerminator -- continue
    | "return" #(space+) Expression #statementTerminator -- return
    | "for" #(space+) identifier
      (#(space+) "from" #(space+) Expression)? (#(space+) ("to" | "through") #(space+) Expression)?
      (#(space+) "step" #(space+) Expression)? SingleStatementBlock<"do"> -- count
    | ("await" | "wait") #(space+) ("for" #(space+))? (identifier "=")? Expression SingleStatementBlock<"do"> -- wait_for_expression
    | ("await" | "wait") #(space+) ("for" #(space+))? (identifier "=")? Expression #statementTerminator -- await_expression
    | "import" #(space+) string_non_interpolatable #statementTerminator -- empty_import
    | "import" #(space+) ListOf<ImportableItemName, ","> #(space+) "from" #(space+) string_non_interpolatable #statementTerminator -- import
    | "import" "*" "as" #(space+) identifier #(space+) "from" #(space+) string_non_interpolatable #statementTerminator -- import_all
    | "import" "*" identifier #(space+) "from" #(space+) string_non_interpolatable #statementTerminator -- import_default
    | "export" #statementTerminator -- empty_export
    | "export" #(space+) ListOf<ImportableItemName, ","> #(space+) "from" #(space+) string_non_interpolatable #statementTerminator -- export_from
    | "export" "*" "from" #(space+) string_non_interpolatable #statementTerminator -- export_all_from
    | "export" #(space+) ListOf<ImportableItemName, ","> #statementTerminator -- export
    | "export" "*" Expression #statementTerminator -- export_default
    | "export" #(space+) ClassDeclaration -- export_class
    | "export" #(space+) VariableAssignment -- export_variable
    | "export" #(space+) BlockFunction<""> -- export_function

  ClassDeclaration = "class" #(space+) identifier ("extends" Expression)? "{" ClassElement* "}"

  ClassElement
    = BlockFunction<"@"> -- method
    | BlockFunction<"@@"> -- static_method
    | "@" identifier "=" Expression #statementTerminator -- property
    | "@@" identifier "=" Expression #statementTerminator -- static_property

  ImportableItemName
    = identifier #(space+) "as" #(space+) identifier -- identifier_rewrite
    | string_non_interpolatable #(space+) "as" #(space+) identifier -- string_rewrite
    | identifier

  ForLoopKey
    = "(" identifier ")" -- parenthesized
    | identifier

  statementTerminator
    = spaces ";" -- semicolon
    | spaces &reserved_block -- keyword
    | spaces &"}" -- block_end
    | spaces end -- script_end
    | lineTerminator -- newline

  lineTerminator = whitespace? ("\r" | "\n")+ spaces ~lineContinuer
  lineContinuer
    = "+" | "-" | "*" | "/" | "^" | "%" | "==" | "!=" | "[" | "(" | "." | "?." | "?" | ":" | "<" | ">" | "&&" | "||" | "??" | reserved_operators

  Expression = AssignmentExp

  LiteralExp
    = "(" Expression ")" -- parenthesized
    | "[" ListOf<Expression, ","> ","? "]" -- array
    | "{" ListOf<ObjectEntry, ","> ","? "}" -- object
    | InlineFunction
    | decimalNumber
    | unitNumber
    | hexNumber
    | bigint
    | identifier
    | property
    | staticProperty
    | symbol
    | boolean
    | string
    | null

  InlineFunction
    = "fn" #(space+) ":"? Expression -- no_args_expression
    | "fn" #(space+) ":"? WrappedStatementBlock -- no_args_wrapped_block
    | "fn" #(space+) "of" #(space+) AssignableWithDefault ":" Expression -- single_arg_expression
    | "fn" #(space+) "of" #(space+) AssignableWithDefault ":"? WrappedStatementBlock -- single_arg_wrapped_block
    | "fn" #(space+) "of" #(space+) ParameterList ":" Expression -- multi_args_expression
    | "fn" #(space+) "of" #(space+) ParameterList ":"? WrappedStatementBlock -- multi_args_wrapped_block

  BlockFunction<prefix>
    = "fn" #(space+) prefix identifier #(space+) ":" Expression -- no_args_expression
    | "fn" #(space+) prefix identifier #(space+) ":"? WrappedStatementBlock -- no_args_wrapped_block
    | "fn" #(space+) prefix identifier #(space+) "of" #(space+) AssignableWithDefault ":" Expression -- single_arg_expression
    | "fn" #(space+) prefix identifier #(space+) "of" #(space+) AssignableWithDefault ":"? WrappedStatementBlock -- single_arg_wrapped_block
    | "fn" #(space+) prefix identifier #(space+) "of" #(space+) ParameterList ":" Expression -- multi_args_expression
    | "fn" #(space+) prefix identifier #(space+) "of" #(space+) ParameterList ":"? WrappedStatementBlock -- multi_args_wrapped_block

  ObjectEntry
    = identifier ~":" -- restructure
    | identOrWord ":" Expression -- key_value
    | symbol ":" Expression -- symbol_value
    | string_non_interpolatable ":" Expression -- string_key
    | string ":" Expression -- computed_string_key
    | digit+ ":" Expression -- numerical_key
    | "[" Expression "]" ":" Expression -- computed_key

  MemberAccessExp
    = MemberAccessExp "." identOrWord -- member_access
    | MemberAccessExp "?." identOrWord -- optional_chaining_member_access
    | MemberAccessExp "." symbol -- symbol_access
    | MemberAccessExp "?." symbol -- optional_chaining_symbol_access
    | MemberAccessExp "[" MemberAccessExp "]" -- computed_member_access
    | MemberAccessExp "?." "[" MemberAccessExp "]" -- optional_chaining_computed_member_access
    | MemberAccessExp "(" ArgumentList ")" -- function_call
    | MemberAccessExp #(space+) "with" #(space+) ~"(" Expression -- function_call_worded
    | MemberAccessExp #(space+) "with" #(space+) "(" ArgumentList ")" -- function_call_worded_list
    | ("a" | "an") #(space+) MemberAccessExp "(" ArgumentList ")" -- class_creation_args_symbolic
    | ("a" | "an") #(space+) MemberAccessExp #(space+) "with" #(space+) ~"(" Expression -- class_creation_args_worded
    | ("a" | "an") #(space+) MemberAccessExp #(space+) "with" #(space+) "(" ArgumentList ")" -- class_creation_args_worded_list
    | LiteralExp

  ArgumentList = ListOf<Expression, ",">
  NonEmptyArgumentList = NonemptyListOf<Expression, ",">

  ParameterList = ListOf<AssignableWithDefault, ","> ","?
  NonEmptyParameterList = NonemptyListOf<AssignableWithDefault, ","> ","?

  ClassCreationExp
    = ("a" | "an") #(space+) ClassCreationExp ~("with" | "(") -- class_creation
    | MemberAccessExp

  NotExp
    = "!" NotExp -- logical_not_symbolic
    | "not" #(space+) NotExp -- logical_not_worded
    | "+" ~digit NotExp -- unary_plus
    | "-" ~digit NotExp -- unary_minus
    | "type" "of" #(space+) NotExp -- typeof
    | ("await" | "wait") #(space+) ("for" #(space+))? Expression -- await
    | ClassCreationExp

  ExpExp
    = ExpExp "^" NotExp -- exponentiate
    | NotExp

  MulExp
    = MulExp "*" ExpExp -- multiplication
    | MulExp "/" ExpExp -- division
    | MulExp "%" ExpExp -- modulus
    | ExpExp

  AddExp
    = AddExp "+" MulExp -- addition
    | AddExp "-" MulExp -- subtraction
    | MulExp

  CompareExp
    = CompareExp "<" AddExp -- less_than
    | CompareExp "<=" AddExp -- less_than_equal
    | CompareExp ">" AddExp -- greater_than
    | CompareExp ">=" AddExp -- greater_than_equal
    | CompareExp #(space+) ("is" #(space+))? "in" #(space+) AddExp -- within
    | CompareExp #(space+) "isnt" #(space+) "in" #(space+) AddExp -- not_within
    | CompareExp #(space+) "is" #("nt"?) #(space+) ("a" | "an") #(space+) AddExp -- instanceof
    | CompareExp #(space+) "isnt" #(space+) ("a" | "an") #(space+) AddExp -- not_instanceof
    | AddExp

  EqualityExp
    = EqualityExp ("==" | EqualityExpWords<"is">) CompareExp -- equal_to
    | EqualityExp ("!=" | EqualityExpWords<"isnt">) CompareExp -- not_equal_to
    | CompareExp
  
  EqualityExpWords<keyword> = #(space+ keyword ~(space+ ("a" | "an")) space+)

  LogicalAndExp
    = LogicalAndExp #(spaces "&&" spaces | space+ "and" space+) EqualityExp -- logical_and
    | EqualityExp
  
  LogicalOrExp
    = LogicalOrExp #(spaces "||" spaces | space+ "or" space+) LogicalAndExp -- logical_or
    | LogicalOrExp "??" LogicalAndExp -- logical_nullish_coalescing
    | LogicalAndExp

  TernaryExp
    = LogicalOrExp "?" TernaryExp ":" TernaryExp -- symbolic
    | "if" #(space+) LogicalOrExp #(space+) "then" #(space+) TernaryExp #(space+) "else" #(space+) TernaryExp -- worded
    | LogicalOrExp

  AssignmentExp
    = Assignable "=" AssignmentExp -- assignment
    | "yield" #(space+) AssignmentExp -- yield
    | "yield" #(space+ "from" | "*") #(space+) AssignmentExp -- yield_from
    | TernaryExp

  VariableAssignment = Assignable "=" Expression

  AssignableWithDefault
    = Assignable "=" Expression -- with_default
    | Assignable

  IdentifierWithDefault
    = identifier "=" Expression -- with_default
    | identifier

  AssignableKeyWithRewrite
    = identifier ":" AssignableWithDefault -- standard_rewrite
    | string_non_interpolatable ":" AssignableWithDefault -- string_rewrite
    | string ":" AssignableWithDefault -- computed_string_rewrite
    | "[" Expression "]" ":" AssignableWithDefault -- computed_rewrite
    | IdentifierWithDefault

  Assignable
    = identifier -- identifier
    | "[" ListOf<AssignableWithDefault, ","> ","? "]" -- array
    | "{" ListOf<AssignableKeyWithRewrite, ","> ","? "}" -- object

  whitespace = (~("\n" | "\r") space)+

  sign = ("+" | "-")?
  number = digit+
  unitNumber = ~"0x" sign digit+ ("." digit+)? ("e" sign digit+)? identifierWord
  decimalNumber = ~"0x" sign digit+ ("." digit+)? ("e" sign digit+)? ~char
  hexNumber = sign "0x" hexDigit+
  bigint = ~"0x" sign digit+ "n"

  boolean = "true" | "false"
  null = "null"

  id_continue = letter | digit

  string_bit<delimeter>
    = ~("\\" | "{" | delimeter) any -- character
    | "\\" ("\\" | "{" | "\"" | "'") -- escape
    | "\\" ("b" | "f" | "n" | "r" | "t" | "v" | ("0" ~digit)) -- escape_sequence
    | "\\x" hexDigit hexDigit -- hex_sequence
    | "\\u" hexDigit hexDigit hexDigit hexDigit -- unicode_sequence
    | "\\u{" hexDigit+ "}" -- unicode_code_point_sequence

  string_interpolatable_bit<delimeter>
    = string_bit<delimeter>
    | "{" applySyntactic<Expression> "}" -- interpolated
  
  string_interpolatable<delimeter> = delimeter string_interpolatable_bit<delimeter>* delimeter
  string_full<delimeter> = delimeter string_bit<delimeter>* delimeter
  string = string_interpolatable<"\""> | string_interpolatable<"'">
  string_non_interpolatable = string_full<"\""> | string_full<"'">

  reserved_block = ("if" | "elif" | "else" | "elseif" | "then" | "print" | "throw" | "for" | "while" | "until" | "unless" | "do" | "repeat" | "step" | "to" | "through" | "return" | "break" | "continue" | "fn" | "wait" | "import" | "export" | "class") ~id_continue
  reserved_operators = ("and" | "or" | "not" | ("is" ~"nt") | "isnt" | "with") ~id_continue
  reserved_inline = ("a" | "an" | "in" | "type" | "of" | "from" | "typeof" | "emits" | "as" | "extends") ~id_continue
  reserved_primitive = ("true" | "false" | "null") ~id_continue
  reserved = reserved_block | reserved_operators | reserved_inline | reserved_primitive

  char = letter | "_"
  word = nonemptyListOf<char+, digit+>
  identifierWord = ~reserved word
  identifierWords = identifierWord (whitespace (identifierWord | digit+))*
  identifier = identifierWords
  identOrWord = identifier | word

  property = "@" spaces identifier
  staticProperty = "@@" spaces identifier

  symbol = "#" spaces identOrWord
}
