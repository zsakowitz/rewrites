Ident struct
Ident Complex
OLBrace {
Ident real
Colon :
Ident num
Comma ,
Ident imag
Colon :
Ident num
Comma ,
ORBrace }
KFn fn
Arrow ->
OLParen (
Ident x
Colon :
Ident num
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident Complex
OLBrace {
Ident real
Colon :
Ident x
Comma ,
Ident imag
Colon :
Num 0.0
Comma ,
ORBrace }
ORBrace }
Ident let
Ident _complex_zero
Assign =
Ident Complex
OLBrace {
Ident real
Colon :
Num 0.0
Comma ,
Ident imag
Colon :
Num 0.0
ORBrace }
Semi ;
KFn fn
Percent %
Ident display
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident latex
OLBrace {
Ident base
OLParen (
Ident z
Dot .
Ident real
ORParen )
Dot .
Ident with_component
OLParen (
Ident i
Comma ,
Ident z
Dot .
Ident imag
ORParen )
Dot .
Ident finalize
ORBrace }
KFn fn
Plus +
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident z
ORBrace }
KFn fn
Plus +
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident a
At @
Plus +
Ident b
ORBrace }
KFn fn
Minus -
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
At @
Minus -
Ident z
ORBrace }
KFn fn
Minus -
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident a
At @
Minus -
Ident b
ORBrace }
KFn fn
Star *
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident Complex
OLBrace {
Ident real
Colon :
Ident a
Dot .
Ident real
Star *
Ident b
Dot .
Ident real
Minus -
Ident a
Dot .
Ident imag
Star *
Ident b
Dot .
Ident imag
Comma ,
Ident imag
Colon :
Ident a
Dot .
Ident imag
Star *
Ident b
Dot .
Ident real
Plus +
Ident a
Dot .
Ident real
Star *
Ident b
Dot .
Ident imag
Comma ,
ORBrace }
ORBrace }
KFn fn
Slash /
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident Complex
OLBrace {
Ident real
Colon :
Ident a
Dot .
Ident real
Star *
Ident b
Dot .
Ident real
Plus +
Ident a
Dot .
Ident imag
Star *
Ident b
Dot .
Ident imag
Comma ,
Ident imag
Colon :
Ident a
Dot .
Ident imag
Star *
Ident b
Dot .
Ident real
Minus -
Ident a
Dot .
Ident real
Star *
Ident b
Dot .
Ident imag
Comma ,
ORBrace }
At @
Slash /
OLParen (
Ident b
Dot .
Ident real
Star *
Ident b
Dot .
Ident real
Plus +
Ident b
Dot .
Ident imag
Star *
Ident b
Dot .
Ident imag
ORParen )
ORBrace }
KFn fn
Ident inv
OLParen (
Ident a
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident Complex
OLBrace {
Ident real
Colon :
Ident a
Dot .
Ident real
Comma ,
Ident imag
Colon :
Minus -
Ident a
Dot .
Ident imag
ORBrace }
At @
Slash /
OLParen (
Ident a
Dot .
Ident real
Star *
Ident a
Dot .
Ident real
Plus +
Ident a
Dot .
Ident imag
Star *
Ident a
Dot .
Ident imag
ORParen )
ORBrace }
KFn fn
Eq ==
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident bool
OLBrace {
Ident a
Dot .
Ident real
Eq ==
Ident b
Dot .
Ident real
AmpAmp &&
Ident a
Dot .
Ident imag
Eq ==
Ident b
Dot .
Ident imag
ORBrace }
Ident let
Ident i
Assign =
Ident Complex
OLBrace {
Ident real
Colon :
Num 0.0
Comma ,
Ident imag
Colon :
Num 1.0
ORBrace }
Semi ;
Comment // TODO: cplothue(complex), cplothue(point)
Comment // TODO: cplot(point), cplot(r32abs)
KFn fn
Ident cplot
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Color
OLBrace {
Ident if
Bang !
Ident is_finite
OLParen (
Ident z
Dot .
Ident real
ORParen )
BarBar ||
Bang !
Ident is_finite
OLParen (
Ident z
Dot .
Ident imag
ORParen )
OLBrace {
Ident return
Ident Color
OLBrace {
Ident r
Colon :
Num 0.0
Comma ,
Ident g
Colon :
Num 0.0
Comma ,
Ident b
Colon :
Num 0.0
Comma ,
Ident a
Colon :
Num 0.0
ORBrace }
Semi ;
ORBrace }
Ident let
Ident angle
Assign =
Ident atan
OLParen (
Ident z
Dot .
Ident imag
Comma ,
Ident z
Dot .
Ident real
ORParen )
Semi ;
Ident let
Ident absval_scaled
Assign =
At @
Ident length
OLParen (
Ident z
ORParen )
Slash /
OLParen (
At @
Ident length
OLParen (
Ident z
ORParen )
Plus +
Num 1.0
ORParen )
Semi ;
Ident let
Ident r0
Assign =
Num 0.08499547839164734
Star *
Num 1.28
Semi ;
Ident let
Ident offset
Assign =
Num 0.8936868
Star *
Num 3.141592653589793
Semi ;
Ident let
Ident rd
Assign =
Num 1.5
Star *
Ident r0
Star *
OLParen (
Num 1.0
Minus -
Num 2.0
Star *
Ident abs
OLParen (
Ident absval_scaled
Minus -
Num 0.5
ORParen )
ORParen )
Semi ;
Ident oklab
OLParen (
Ident absval_scaled
Comma ,
Ident rd
Star *
Ident cos
OLParen (
Ident angle
Plus +
Ident offset
ORParen )
Comma ,
Ident rd
Star *
Ident sin
OLParen (
Ident angle
Plus +
Ident offset
ORParen )
Comma ,
Num 1.0
ORParen )
ORBrace }
KFn fn
Percent %
Ident plot_shader
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Color
OLBrace {
Ident cplot
OLParen (
Ident z
ORParen )
ORBrace }
Comment // TODO: cplot on absolute value
Comment // float absval_scaled = abs(z) / (abs(z) + 1.0);
Comment // vec3 ok_coords = vec3(absval_scaled, 0, 0);
Comment // vec3 rgb = _helper_oklab(ok_coords);
Comment // return vec4(vec3(0), 1.0-rgb.real);
KFn fn
Ident arg
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident num
OLBrace {
Comment // TRIG:
Ident atan
OLParen (
Ident z
Dot .
Ident imag
Comma ,
Ident z
Dot .
Ident real
ORParen )
ORBrace }
KFn fn
Ident sign
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident if
Ident z
Dot .
Ident real
Eq ==
Num 0.0
AmpAmp &&
Ident z
Dot .
Ident imag
Eq ==
Num 0.0
OLBrace {
Ident _complex_zero
ORBrace }
Ident else
OLBrace {
At @
Ident norm
OLParen (
Ident z
ORParen )
ORBrace }
ORBrace }
KFn fn
Ident exp
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident exp
OLParen (
Ident z
Dot .
Ident real
ORParen )
At @
Star *
Ident Complex
OLBrace {
Ident real
Colon :
Ident cos
OLParen (
Ident z
Dot .
Ident imag
ORParen )
Comma ,
Ident imag
Colon :
Ident sin
OLParen (
Ident z
Dot .
Ident imag
ORParen )
ORBrace }
ORBrace }
KFn fn
Ident ln
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident if
Ident z
Dot .
Ident real
Eq ==
Num 0.0
AmpAmp &&
Ident z
Dot .
Ident imag
Eq ==
Num 0.0
OLBrace {
Comment // limit is negative infinity
Ident Complex
OLBrace {
Ident real
Colon :
Ident neg_inf
Comma ,
Ident imag
Colon :
Num 0.0
ORBrace }
ORBrace }
Ident else
OLBrace {
Ident Complex
OLBrace {
Ident real
Colon :
Ident ln
OLParen (
At @
Ident length
OLParen (
Ident z
ORParen )
ORParen )
Comma ,
Ident imag
Colon :
Ident atan
OLParen (
Ident z
Dot .
Ident imag
Comma ,
Ident z
Dot .
Ident real
ORParen )
ORBrace }
ORBrace }
ORBrace }
KFn fn
Percent %
Ident xprody
OLParen (
Ident x
Colon :
Ident Complex
Comma ,
Ident y
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident if
Ident is_nan
OLParen (
Ident y
Dot .
Ident real
ORParen )
BarBar ||
Ident is_nan
OLParen (
Ident y
Dot .
Ident imag
ORParen )
OLBrace {
Ident Complex
OLBrace {
Ident real
Colon :
Ident nan
Comma ,
Ident imag
Colon :
Ident nan
ORBrace }
ORBrace }
Ident else
Ident if
Ident x
Dot .
Ident real
Eq ==
Num 0.0
AmpAmp &&
Ident x
Dot .
Ident imag
Eq ==
Num 0.0
OLBrace {
Ident _complex_zero
ORBrace }
Ident else
OLBrace {
Ident x
Star *
Ident y
ORBrace }
ORBrace }
KFn fn
Ident log10
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident ln
OLParen (
Ident z
ORParen )
At @
Slash /
Ident ln
OLParen (
Num 10.0
ORParen )
ORBrace }
KFn fn
Ident conj
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident Complex
OLBrace {
Ident real
Colon :
Ident z
Dot .
Ident real
Comma ,
Ident imag
Colon :
Minus -
Ident z
Dot .
Ident imag
ORBrace }
ORBrace }
KFn fn
Ident dot
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident num
OLBrace {
At @
Ident dot
OLParen (
Ident a
Comma ,
Ident b
ORParen )
ORBrace }
KFn fn
Ident unsign
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
At @
Ident abs
OLParen (
Ident z
ORParen )
ORBrace }
KFn fn
Ident i
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident num
OLBrace {
Ident z
Dot .
Ident imag
ORBrace }
KFn fn
Carat ^
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident if
Ident a
Dot .
Ident real
Eq ==
Num 0.0
AmpAmp &&
Ident a
Dot .
Ident imag
Eq ==
Num 0.0
OLBrace {
Ident _complex_zero
ORBrace }
Ident else
OLBrace {
Ident exp
OLParen (
Ident ln
OLParen (
Ident a
ORParen )
Star *
Ident b
ORParen )
ORBrace }
ORBrace }
KFn fn
Percent %
Ident odot
OLParen (
Ident a
Colon :
Ident Complex
Comma ,
Ident b
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident a
At @
Star *
Ident b
ORBrace }
KFn fn
Ident complex
OLParen (
Ident a
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident a
ORBrace }
KFn fn
Ident abs
OLParen (
Ident a
Colon :
Ident Complex
ORParen )
Arrow ->
Ident num
OLBrace {
At @
Ident length
OLParen (
Ident a
ORParen )
ORBrace }
KFn fn
Percent %
Ident sqrt
OLParen (
Ident z
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
Ident let
Ident a
Assign =
Ident atan
OLParen (
Ident z
Dot .
Ident imag
Comma ,
Ident z
Dot .
Ident real
ORParen )
Slash /
Num 2.0
Semi ;
Ident Complex
OLBrace {
Ident real
Colon :
Ident cos
OLParen (
Ident a
ORParen )
Comma ,
Ident imag
Colon :
Ident sin
OLParen (
Ident a
ORParen )
ORBrace }
At @
Star *
Ident sqrt
OLParen (
At @
Ident length
OLParen (
Ident z
ORParen )
ORParen )
ORBrace }
KFn fn
Percent %
Ident plot_2d
OLParen (
Ident cv
Colon :
Ident Canvas
Comma ,
Ident p
Colon :
Ident Complex
ORParen )
Arrow ->
Ident CanvasPoint
OLBrace {
Ident cv
Dot .
Ident point_at
OLParen (
Ident p
Dot .
Ident real
Comma ,
Ident p
Dot .
Ident imag
ORParen )
ORBrace }
Ident let
Ident _complex_nan
Assign =
Ident Complex
OLBrace {
Ident real
Colon :
Ident nan
Comma ,
Ident imag
Colon :
Ident nan
Comma ,
ORBrace }
Semi ;
KFn fn
Ident midpoint
OLParen (
Ident p1
Colon :
Ident Complex
Comma ,
Ident p2
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Complex
OLBrace {
OLParen (
Ident p1
Plus +
Ident p2
ORParen )
Slash /
Num 2.0
ORBrace }
KFn fn
Ident distance
OLParen (
Ident p1
Colon :
Ident Complex
Comma ,
Ident p2
Colon :
Ident Complex
ORParen )
Arrow ->
Ident num
OLBrace {
At @
Ident length
OLParen (
Ident p1
Minus -
Ident p2
ORParen )
ORBrace }
KFn fn
Ident is_finite
OLParen (
Ident p
Colon :
Ident Complex
ORParen )
Arrow ->
Ident bool
OLBrace {
Ident is_finite
OLParen (
Ident p
Dot .
Ident real
ORParen )
AmpAmp &&
Ident is_finite
OLParen (
Ident p
Dot .
Ident imag
ORParen )
ORBrace }
KFn fn
Ident point
OLParen (
Ident x
Colon :
Ident Complex
ORParen )
Arrow ->
Ident Point
OLBrace {
Ident Point
OLBrace {
Ident x
Colon :
Ident x
Dot .
Ident real
Comma ,
Ident y
Colon :
Ident x
Dot .
Ident imag
Comma ,
ORBrace }
ORBrace }
Ident expose
Ident package
OLBrace {
Ident name
Colon :
Ident complex
Ident numbers
Comma ,
Ident default
Colon :
KTrue true
Comma ,
ORBrace }
Comment // TODO: debugpoint, screendistance, point
