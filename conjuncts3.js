// @ts-check

function generateList(/** @type {string} */ source) {
  return source.split("|").flatMap((segment) => {
    const matches = (segment.match(/\[[^[\]]+\]|[^[\]]/g) || []).map((match) =>
      match.startsWith("[") ? match.slice(1, -1) : match,
    )

    let output = [""]

    for (const match of matches) {
      const chars = match.split("")
      output = output.flatMap((x) => chars.map((char) => x + char))
    }

    return output
  })
}

function replaceCategories(/** @type {string} */ text) {
  const replacements = {
    P: "ptkbdg",
    F: "fvţḑçxļ",
    S: "szšž",
    C: "cẓčj",
    N: "mnň",
    R: "rř",
    L: "l",
    H: "h",
    Y: "wy",
  }

  return text.replace(/[A-Z]/g, (x) => "[" + replacements[x] + "]")
}

const one = "P, F, S, C, L, R, N"

const two =
  "PP, PF, PS, PC, PL, PR, PN, PY, PH, FP, FF, FS, FC, FL, FR, FN, FY, FH, SP, SF, SS, SC, SL, SR, SN, SY, SH, CP, CF, CC, CL, CR, CN, CY, CH, LP, LF, LS, LC, LL, LR, LN, LY, LH, RP, RF, RS, RC, RL, RR, RN, RY, RH, NP, NF, NS, NC, NL, NR, NN, NY, NH"

const hForms = "H, HL, HR, HN, HY, HLY, HRY, HNY"

const three =
  "RPP, RPF, RPS, RPC, RPN, RPL, RPR, RPY, RPH, LPP, LPF, LPS, LPC, LPN, LPL, LPR, LPY, LPH, NPP, NPN, NPL, NPR, NPY, NPH, NPF, SPF, SPS, SPL, SPR, SPY, SPH, FPF, FPS, FPL, FPR, FPY, FPH, PPL, PPR, PPY, PPH, PPF, CPL, CPR, CPY, CPH, CPF, PPS, SPN, FPN, NPS, NPC, PPN, CPS, CPN, LFP, LFF, LFS, LFC, LFN, LFL, LFR, LFY, LFH, RFP, RFF, RFS, RFC, RFN, RFL, RFR, RFY, RFH, NFP, NFF, NFC, NFN, NFL, NFR, NFY, NFH, PFP, PFF, PFN, PFL, PFR, PFY, SFF, SFN, SFL, SFR, SFY, FFF, FFN, FFL, FFR, FFY, CFF, CFN, CFL, CFR, CFY, FFP, FFS, FFC, FFH, PFS, PFC, RSP, RSF, RSS, RSC, RSN, RSL, RSR, RSY, RSH, LSP, LSF, LSS, LSC, LSN, LSL, LSR, LSY, LSH, NSP, NSF, NSS, NSC, NSN, NSL, NSR, NSY, NSH, PSP, PSF, PSS, PSC, PSN, PSL, PSR, PSY, PSH, FSP, FSF, FSS, FSC, FSN, FSL, FSR, FSY, FSH, SSP, SSF, SSC, SSN, SSL, SSR, SSY, SSH, RCP, RCF, RCC, RCN, RCL, RCR, RCY, RCH, LCP, LCF, LCC, LCN, LCL, LCR, LCY, LCH, CCP, CCF, CCC, CCN, CCL, CCR, CCY, CCH, SCY, SCH, FCY, FCH, RNP, RNF, RNS, RNC, RNN, RNL, RNR, RNY, RNH, LNP, LNF, LNS, LNC, LNN, LNL, LNR, LNY, LNH, PNY, FNY, SNY, CNY, NNP, NNF, NNS, NNC, NNN, NNL, NNR, NNY, NNH, LLP, LLF, LLS, LLC, LLN, LLR, LLY, LLH, RLL, RLY, RLH, RLR, PLL, PLY, FLL, FLY, SLL, SLY, CLL, CLY, NLL, NLY, RRP, RRF, RRS, RRC, RRN, RRL, RRY, RRH, PRR, FRR, SRR, CRR, NRR, LRR, PRY, FRY, PHN, PHY, CHN, CHY, NHN, NHY, RHN, RHY, LHN, LHY, PHR, CHR, NHR, RHR, LHR"

const four =
  "FFCH, FFCL, FFCN, FFCR, FFCY, FFFF, FFFL, FFFR, FFFY, FFNL, FFNR, FFNY, FFPF, FFPH, FFPL, FFPN, FFPR, FFPY, FPNY, FSFF, FSFL, FSFN, FSFR, FSFY, FSLY, FSNL, FSNR, FSNY, FSPF, FSPH, FSPL, FSPN, FSPR, FSPS, FSPY, LCFF, LCFL, LCFN, LCFR, LCFY, LCHY, LCNL, LCNR, LCNY, LCPF, LCPH, LCPL, LCPR, LCPS, LCPY, LFCH, LFCL, LFCN, LFCR, LFCY, LFFC, LFFF, LFFL, LFFN, LFFP, LFFR, LFFS, LFFY, LFNL, LFNR, LFNY, LFPF, LFPH, LFPL, LFPN, LFPR, LFPS, LFPY, LFSC, LFSF, LFSH, LFSL, LFSN, LFSP, LFSR, LFSS, LFSY, LLCH, LLCL, LLCN, LLCR, LLCY, LLFC, LLFF, LLFL, LLFN, LLFP, LLFR, LLFS, LLFY, LLHN, LLHY, LLNC, LLNF, LLNH, LLNL, LLNN, LLNP, LLNR, LLNS, LLNY, LLPF, LLPH, LLPL, LLPN, LLPP, LLPR, LLPS, LLPY, LLSC, LLSF, LLSH, LLSL, LLSN, LLSP, LLSR, LLSY, LNFC, LNFF, LNFH, LNFL, LNFN, LNFP, LNFR, LNFY, LNHR, LNHY, LNNC, LNNF, LNNH, LNNL, LNNN, LNNP, LNNR, LNNS, LNNY, LNPF, LNPH, LNPL, LNPN, LNPR, LNPS, LNPY, LNSC, LNSF, LNSH, LNSL, LNSN, LNSP, LNSR, LNSS, LNSY, LPFC, LPFF, LPFL, LPFN, LPFP, LPFR, LPFY, LPHY, LPNL, LPNR, LPNY, LPPF, LPPH, LPPL, LPPR, LPPS, LPPY, LPSC, LPSF, LPSH, LPSL, LPSN, LPSP, LPSR, LPSS, LPSY, LSFF, LSFL, LSFN, LSFR, LSFY, LSNL, LSNR, LSNY, LSPF, LSPH, LSPL, LSPN, LSPR, LSPS, LSPY, LSSC, LSSF, LSSL, LSSN, LSSP, LSSR, LSSY, NCHY, NFCH, NFCL, NFCN, NFCR, NFCY, NFFC, NFFF, NFFL, NFFN, NFFP, NFFR, NFFS, NFFY, NFNL, NFNR, NFNY, NFPF, NFPH, NFPL, NFPN, NFPR, NFPS, NFPY, NFSC, NFSF, NFSH, NFSL, NFSN, NFSP, NFSR, NFSS, NFSY, NNCH, NNCL, NNCN, NNCR, NNCY, NNFC, NNFF, NNFL, NNFN, NNFP, NNFR, NNFS, NNFY, NNHY, NNPF, NNPH, NNPL, NNPN, NNPP, NNPR, NNPS, NNPY, NNSC, NNSF, NNSH, NNSL, NNSN, NNSP, NNSR, NNSY, NPFF, NPFL, NPFN, NPFP, NPFR, NPFY, NPHY, NPNL, NPNR, NPNY, NPPF, NPPH, NPPL, NPPR, NPPY, NSFF, NSFL, NSFN, NSFR, NSFY, NSNL, NSNR, NSNY, NSPF, NSPH, NSPL, NSPN, NSPR, NSPS, NSPY, NSSC, NSSF, NSSL, NSSN, NSSP, NSSR, NSSY, PFCH, PFCL, PFCN, PFCR, PFCY, PFFC, PFFF, PFFL, PFFN, PFFP, PFFR, PFFS, PFFY, PFNL, PFNR, PFNY, PFPF, PFPH, PFPL, PFPN, PFPR, PFPY, PFSF, PFSH, PFSL, PFSN, PFSP, PFSR, PFSS, PFSY, PSFF, PSFL, PSFN, PSFR, PSFY, PSLY, PSNL, PSNR, PSNY, PSPF, PSPH, PSPL, PSPN, PSPR, PSPS, PSPY, PSSC, PSSF, PSSL, PSSN, PSSP, PSSR, PSSY, RCFF, RCFL, RCFN, RCFR, RCFY, RCHY, RCNL, RCNR, RCNY, RCPF, RCPH, RCPL, RCPR, RCPS, RCPY, RFCH, RFCL, RFCN, RFCR, RFCY, RFFC, RFFF, RFFL, RFFN, RFFP, RFFR, RFFS, RFFY, RFNL, RFNR, RFNY, RFPF, RFPH, RFPL, RFPN, RFPR, RFPS, RFPY, RFSC, RFSF, RFSH, RFSL, RFSN, RFSP, RFSR, RFSS, RFSY, RLHN, RLHY, RNFC, RNFF, RNFH, RNFL, RNFN, RNFP, RNFR, RNFY, RNHR, RNHY, RNNC, RNNF, RNNH, RNNL, RNNN, RNNP, RNNR, RNNS, RNNY, RNPC, RNPF, RNPH, RNPL, RNPN, RNPP, RNPR, RNPS, RNPY, RNSC, RNSF, RNSH, RNSL, RNSN, RNSP, RNSR, RNSS, RNSY, RPFC, RPFF, RPFL, RPFN, RPFP, RPFR, RPFY, RPHY, RPNL, RPNR, RPNY, RPPF, RPPH, RPPL, RPPR, RPPS, RPPY, RPSC, RPSF, RPSH, RPSL, RPSN, RPSP, RPSR, RPSS, RPSY, RRCH, RRCL, RRCN, RRCR, RRCY, RRFC, RRFF, RRFL, RRFN, RRFP, RRFR, RRFS, RRFY, RRHN, RRHY, RRNC, RRNF, RRNH, RRNL, RRNN, RRNP, RRNR, RRNS, RRNY, RRPF, RRPH, RRPL, RRPN, RRPP, RRPR, RRPS, RRPY, RRSC, RRSF, RRSH, RRSL, RRSN, RRSP, RRSR, RRSY, RSFF, RSFL, RSFN, RSFR, RSFY, RSNL, RSNR, RSNY, RSPF, RSPH, RSPL, RSPN, RSPR, RSPS, RSPY, RSSC, RSSF, RSSL, RSSN, RSSP, RSSR, RSSY, SPFL, SPFR, SPFY, SPNY, SSFF, SSFL, SSFN, SSFR, SSFY, SSLY, SSNL, SSNR, SSNY, SSPF, SSPH, SSPL, SSPN, SSPR, SSPS, SSPY"

const five =
  "LPSPL, LPSPR, LPSPY, LFSPL, LFSPR, LFSPY, RPSPL, RPSPR, RPSPY, RFSPL, RFSPR, RFSPY, LPSPF, LPSPH, LFSPF, LFSPH, RPSPF, RPSPH, RFSPF, RFSPH, LPSNY, LFSNY, RPSNY, RFSNY, LPFPL, LPFPR, LPFPY, RPFPL, RPFPR, RPFPY, LPFPH, RPFPH, LPSFL, LPSFR, LPSFY, LFSFL, LFSFR, LFSFY, RPSFL, RPSFR, RPSFY, RFSFL, RFSFR, RFSFY, LSPFL, LSPFR, LSPFY, LFPFL, LFPFR, LFPFY, RSPFL, RSPFR, RSPFY, RFPFL, RFPFR, RFPFY, NSPFL, NSPFR, NSPFY, NFPFL, NFPFR, NFPFY, LNSFL, LNSFR, LNSFY, LNFFL, LNFFR, LNFFY, RNSFL, RNSFR, RNSFY, RNFFL, RNFFR, RNFFY, LNSPL, LNSPR, LNSPY, LNFPL, LNFPR, LNFPY, RNSPL, RNSPR, RNSPY, RNFPL, RNFPR, RNFPY, LNSPH, LNSPF, LNFPH, LNFPF, RNSPH, RNSPF, RNFPH, RNFPF, LPFFL, LPFFR, LPFFY, RPFFL, RPFFR, RPFFY, RNPPL, RNPPR, RNPPH, RNPPY, PSSPL, PSSPR, PSSPH, PSSPY, PSSFL, PSSFR, PSSFH, PSSFY, FSSPL, FSSPR, FSSPH, FSSPY, FSSFL, FSSFR, FSSFH, FSSFY, NSSPL, NSSPR, NSSPH, NSSPY, NSSFL, NSSFR, NSSFH, NSSFY, LSSPL, LSSPR, LSSPH, LSSPY, LSSFL, LSSFR, LSSFH, LSSFY, RSSPL, RSSPR, RSSPH, RSSPY, RSSFL, RSSFR, RSSFH, RSSFY, PSSNY, FSSNY, NSSNY, LSSNY, RSSNY, PSPHY, PFPHY, LPSSP, LPSSN, LPSSL, LPSSR, LPSSY, LNSSP, LNSSN, LNSSL, LNSSR, LNSSY, RPSSP, RPSSN, RPSSL, RPSSR, RPSSY, RNSSP, RNSSN, RNSSL, RNSSR, RNSSY, LFPSS, RFPSS, LNPSS, RNPSS, PFFPL, PFFPR, PFFPH, PFFPY, NFFPL, NFFPR, NFFPH, NFFPY, LFFPL, LFFPR, LFFPH, LFFPY, RFFPL, RFFPR, RFFPH, RFFPY, PFFNY, NFFNY, LFFNY, RFFNY, LPFFP, LPFFN, LNFFP, LNFFN, RPFFP, RPFFN, RNFFP, RNFFN, LFPFF, RFPFF, LNPFF, RNPFF, NNSPL, NNSPR, NNSPH, NNSPY, NNFPL, NNFPR, NNFPH, NNFPY, NNSFL, NNSFR, NNSFY, LNNPS, LNNPF, LNNPL, LNNPR, LNNPH, LNNPY, RNNPS, RNNPF, RNNPL, RNNPR, RNNPH, RNNPY, LNNSP, LNNSL, LNNSR, LNNSY, LNNFP, LNNFL, LNNFR, LNNFY, RNNSP, RNNSL, RNNSR, RNNSY, RNNFP, RNNFL, RNNFR, RNNFY, LNNSN, LNNSF, LNNFN, LNNFF, RNNSN, RNNSF, RNNFN, RNNFF, LLSPF, LLSPL, LLSPR, LLSPH, LLSPY, LLFPF, LLFPL, LLFPR, LLFPH, LLFPY, LLSNY, LLFNY, LLNSP, LLNSL, LLNSR, LLNSY, LLNFP, LLNFL, LLNFR, LLNFY, LLNSF, LLNFF, RRSPF, RRSPL, RRSPR, RRSPH, RRSPY, RRFPF, RRFPL, RRFPR, RRFPH, RRFPY, RRSNY, RRFNY, RRNSP, RRNSL, RRNSR, RRNSY, RRNFP, RRNFL, RRNFR, RRNFY, RRNSF, RRNFF"

const all = [one, two, hForms, three, four, five].join(", ").replace(/, /g, "|")

const conjuncts = generateList(replaceCategories(all))

const PROHIBITED_CONJUNCTS =
  /.'|[td][szšžcżčjţḑ]|[kg][xň]|kg|gk|td|dt|pb|bp|fv|vf|ţḑ|ḑţ|cż|żc|čj|jč|čc|jc|čż|jż|[šž][cż]|sż|s[zšž]|z[sšž]|š[szž]|ž[szš]|[cżčj][szšž]|[szšž]ç|ç[szšž]|[cżčj]ç|ç[żj]|ļç|çļ|hç|çh|xç|n[cżčj]|m[pb][fvtdţḑ]|n(?:k[sš]|g[zž])|n[pb]|n[fv].|ň[kgxy]|x[szšžçgļňyhř]|[bdghç]ļ|ļ[szšžhç]|[ļxç]h$|[rh]ř|řr|[wy]./

const conjunctsJQ = conjuncts.filter(
  (conjunct) => !PROHIBITED_CONJUNCTS.test(conjunct),
)

const PROHIBITED_CONJUNCTS_2 = /ḑs|ḑš|ḑz|ḑž|nň/

const conjunctsLK = conjunctsJQ.filter(
  (conjunct) => !PROHIBITED_CONJUNCTS_2.test(conjunct),
)
